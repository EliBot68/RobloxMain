-- ServiceReferenceValidator.server.luau
-- Comprehensive service reference validation script

local _ReplicatedStorage = game:GetService("ReplicatedStorage")

local ServiceReferenceValidator = {}

-- List of all services that should exist
local EXPECTED_SERVICES = {
    -- Core services
    "PlayerService",
    "UnifiedDataService", 
    "DataAdapter",
    "DataMigrationService",
    "EconomyBalanceService",
    
    -- Main services
    "MainGameService",
    "GameTrackService",
    "EnhancedGameTrackService", -- Alias
    "UpgradeService",
    "QuestService",
    "LevelingService",
    "AntiCheatService",
    "ObstacleSpawnerService",
    
    -- Economy services
    "CoinService",
    "ShopService", 
    "MysteryService",
    
    -- Other services
    "PetService",
    "PetOrchestrationService",
    "LeaderboardService",
    "AchievementService",
    "PartyService",
    "TrophyService"
}

-- Validate that all expected services exist and can be loaded
function ServiceReferenceValidator:ValidateAllServices()
    print("üîç Starting comprehensive service reference validation...")
    
    local results = {
        passed = {},
        failed = {},
        warnings = {}
    }
    
    for _, serviceName in ipairs(EXPECTED_SERVICES) do
        local success, result = self:ValidateService(serviceName)
        
        if success then
            table.insert(results.passed, serviceName)
            print("‚úÖ " .. serviceName .. " - OK")
        else
            table.insert(results.failed, {service = serviceName, error = result})
            warn("‚ùå " .. serviceName .. " - FAILED: " .. tostring(result))
        end
    end
    
    -- Print summary
    print("\nüìä VALIDATION SUMMARY:")
    print("‚úÖ Passed: " .. #results.passed .. " services")
    print("‚ùå Failed: " .. #results.failed .. " services") 
    print("‚ö†Ô∏è Warnings: " .. #results.warnings .. " issues")
    
    if #results.failed > 0 then
        print("\nüö® FAILED SERVICES:")
        for _, failure in ipairs(results.failed) do
            print("   - " .. failure.service .. ": " .. failure.error)
        end
    end
    
    return results
end

-- Validate a single service
function ServiceReferenceValidator:ValidateService(serviceName)
    local success, service = pcall(function()
        -- Try to require the service from different possible locations
        local paths = {
            script.Parent.services[serviceName],
            script.Parent.services.core[serviceName], 
            script.Parent.services.economy[serviceName]
        }
        
        for _, path in ipairs(paths) do
            if path then
                return require(path)
            end
        end
        
        error("Service not found in any expected location")
    end)
    
    if success then
        -- Additional validation - check if service has expected structure
        if type(service) == "table" then
            if service.Init or service.Initialize or service.Start then
                return true, service
            else
                return false, "Service table missing Init/Initialize/Start methods"
            end
        else
            return false, "Service didn't return a table"
        end
    else
        return false, service
    end
end

-- Check for broken references in specific files
function ServiceReferenceValidator:CheckBrokenReferences()
    print("üîç Checking for broken service references...")
    
    local knownIssues = {
        {
            file = "economy/CoinService.luau",
            issue = "EnhancedUpgradeService reference",
            status = "FIXED - Updated to UpgradeService"
        },
        {
            file = "Documentation",
            issue = "EnhancedGameTrackService references", 
            status = "FIXED - Created alias service"
        }
    }
    
    print("üìã KNOWN ISSUES STATUS:")
    for _, issue in ipairs(knownIssues) do
        print("   " .. issue.file .. ": " .. issue.status)
    end
end

-- Auto-run validation when script loads
local function runValidation()
    if game:GetService("RunService"):IsServer() then
        wait(2) -- Give services time to load
        
        print("üöÄ AUTO-RUNNING SERVICE REFERENCE VALIDATION")
        local results = ServiceReferenceValidator:ValidateAllServices()
        ServiceReferenceValidator:CheckBrokenReferences()
        
        if #results.failed == 0 then
            print("üéâ ALL SERVICE REFERENCES VALIDATED SUCCESSFULLY!")
        else
            warn("‚ö†Ô∏è VALIDATION FOUND ISSUES - CHECK OUTPUT ABOVE")
        end
    end
end

-- Run validation
spawn(runValidation)

return ServiceReferenceValidator
